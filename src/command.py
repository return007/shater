import connection
import pickle
import subprocess
import time

class Command(object):
	'''
	This class provides utilities to execute command on remote 
	system, get output of the executed commands, etc.
	'''

	def __init__(self, command):
		self.command = command
		self.timestamp = "%.4f" %time.time()
		self.outfile = "../.shater/." + "".join(str(self.timestamp).split("."))


	def make_executable(self):
		'''
		Makes a command executable by redirecting the stdout and stderr to a file
		'''
		self.command += " > "+self.outfile+" 2>&1; exit 0"


	def execute(self):
		'''
		execute the command and store the stdout and stderr in a unique file
		'''
		self.make_executable()
		subprocess.check_output(self.command, shell=True)


	def get_result(self):
		'''
		Returns result generated by executing command
		'''
		file = open(self.outfile, "r")
		res = file.readlines()
		return '\n'.join(res)


	def __str__(self):
		return 'Command object for "%s"' %(self.command)


def serialize(command_obj):
	return pickle.dumps(command_obj)

def deserialize(serialized_obj):
	return pickle.loads(serialized_obj)

